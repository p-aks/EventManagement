{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst bodyParser = require(\"body-parser\");\nconst {\n  Client\n} = require(\"pg\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// PostgreSQL setup\nconst client = new Client({\n  connectionString: process.env.DATABASE_URL || \"postgresql://postgres:postgre@localhost:5432/eventmanagement\"\n});\nclient.connect();\n\n// ==================== SIGN-UP ROUTE ====================\napp.post(\"/signup\", async (req, res) => {\n  const {\n    name,\n    email,\n    password,\n    role\n  } = req.body;\n  try {\n    // Check if user already exists\n    const existing = await client.query(\"SELECT * FROM users WHERE email = $1\", [email]);\n    if (existing.rows.length > 0) {\n      return res.status(400).json({\n        message: \"User already exists\"\n      });\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Insert into DB\n    await client.query(\"INSERT INTO users (name, email, password_hash, role) VALUES ($1, $2, $3, $4)\", [name, email, hashedPassword, role.toLowerCase()]);\n    res.status(201).json({\n      message: \"User registered successfully\"\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      message: \"Server error during sign-up\"\n    });\n  }\n});\n\n// ==================== LOGIN ROUTE ====================\napp.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const result = await client.query(\"SELECT * FROM users WHERE email = $1\", [email]);\n    const user = result.rows[0];\n    if (!user) {\n      return res.status(400).json({\n        message: \"User not found\"\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password_hash);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n    const token = jwt.sign({\n      userId: user.id,\n      role: user.role\n    }, process.env.JWT_SECRET || \"secretkey\", {\n      expiresIn: \"1h\"\n    });\n    console.log(\"Login successful. Role:\", user.role);\n    res.status(200).json({\n      message: \"Login successful\",\n      token,\n      role: user.role,\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n//START SERVER \napp.listen(PORT, () => {\n  console.log(`Server running at http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bcrypt","jwt","bodyParser","Client","config","app","PORT","process","env","use","json","client","connectionString","DATABASE_URL","connect","post","req","res","name","email","password","role","body","existing","query","rows","length","status","message","hashedPassword","hash","toLowerCase","err","console","error","result","user","isMatch","compare","password_hash","token","sign","userId","id","JWT_SECRET","expiresIn","log","listen"],"sources":["D:/eventmanagement/frontend/src/components/SignUp.js"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst { Client } = require(\"pg\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// PostgreSQL setup\r\nconst client = new Client({\r\n  connectionString: process.env.DATABASE_URL || \"postgresql://postgres:postgre@localhost:5432/eventmanagement\"\r\n});\r\nclient.connect();\r\n\r\n// ==================== SIGN-UP ROUTE ====================\r\napp.post(\"/signup\", async (req, res) => {\r\n  const { name, email, password, role } = req.body;\r\n\r\n  try {\r\n    // Check if user already exists\r\n    const existing = await client.query(\"SELECT * FROM users WHERE email = $1\", [email]);\r\n    if (existing.rows.length > 0) {\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Insert into DB\r\n    await client.query(\r\n      \"INSERT INTO users (name, email, password_hash, role) VALUES ($1, $2, $3, $4)\",\r\n      [name, email, hashedPassword, role.toLowerCase()]\r\n    );\r\n\r\n    res.status(201).json({ message: \"User registered successfully\" });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"Server error during sign-up\" });\r\n  }\r\n});\r\n\r\n// ==================== LOGIN ROUTE ====================\r\napp.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const result = await client.query(\"SELECT * FROM users WHERE email = $1\", [email]);\r\n    const user = result.rows[0];\r\n\r\n    if (!user) {\r\n      return res.status(400).json({ message: \"User not found\" });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password_hash);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { userId: user.id, role: user.role },\r\n      process.env.JWT_SECRET || \"secretkey\",\r\n      { expiresIn: \"1h\" }\r\n    );\r\n\r\n    console.log(\"Login successful. Role:\", user.role);\r\n\r\n    res.status(200).json({\r\n      message: \"Login successful\",\r\n      token,\r\n      role: user.role,\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n//START SERVER \r\napp.listen(PORT, () => {\r\n  console.log(`Server running at http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}